{{- if .Values.metabase.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "qr-app.fullname" . }}-metabase
  labels:
    {{- include "qr-app.labels" . | nindent 4 }}
    app.kubernetes.io/component: metabase
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "qr-app.selectorLabels" . | nindent 6 }}
      app.kubernetes.io/component: metabase
  template:
    metadata:
      labels:
        {{- include "qr-app.selectorLabels" . | nindent 8 }}
        app.kubernetes.io/component: metabase
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      initContainers:
        - name: create-metabase-db
          image: {{ .Values.postgres.image | default "postgres:15-alpine" | quote }}
          envFrom:
            - secretRef:
                name: {{ include "qr-app.fullname" . }}-postgres
          env:
            - name: MB_APP_DB
              value: {{ .Values.metabase.appdb.dbname | quote }}
            - name: PGHOST
              value: {{ printf "%s-postgres" (include "qr-app.fullname" .) | quote }}
            - name: PGPORT
              value: {{ .Values.postgres.service.port | quote }}
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  name: {{ include "qr-app.fullname" . }}-postgres
                  key: POSTGRES_PASSWORD
          command: ["sh", "-c"]
          args:
            - >-
              echo "Ensuring DB $MB_APP_DB exists on $PGHOST:$PGPORT..." &&
              psql -U "$POSTGRES_USER" -h "$PGHOST" -p "$PGPORT" -tc "SELECT 1 FROM pg_database WHERE datname='"$MB_APP_DB"'" | grep -q 1
              || createdb -U "$POSTGRES_USER" -h "$PGHOST" -p "$PGPORT" "$MB_APP_DB";
      containers:
        - name: metabase
          image: {{ .Values.metabase.image | quote }}
          env:
            # Metabase Application DB (stores Metabaseâ€™s own config)
            - name: MB_DB_TYPE
              value: postgres
            - name: MB_DB_DBNAME
              value: {{ .Values.metabase.appdb.dbname | quote }}
            - name: MB_DB_PORT
              value: {{ .Values.postgres.service.port | quote }}
            - name: MB_DB_HOST
              value: {{ printf "%s-postgres" (include "qr-app.fullname" .) | quote }}
            - name: MB_DB_USER
              valueFrom:
                secretKeyRef:
                  name: {{ include "qr-app.fullname" . }}-postgres
                  key: POSTGRES_USER
            - name: MB_DB_PASS
              valueFrom:
                secretKeyRef:
                  name: {{ include "qr-app.fullname" . }}-postgres
                  key: POSTGRES_PASSWORD
            - name: MB_SITE_URL
              value: {{ .Values.metabase.siteUrl | default (printf "https://%s" (index (index .Values.ingress.hosts 0) "host")) | quote }}
            - name: MB_SETUP_TOKEN
              valueFrom:
                secretKeyRef:
                  name: {{ include "qr-app.fullname" . }}-metabase-bootstrap
                  key: MB_SETUP_TOKEN
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          readinessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 10
          livenessProbe:
            httpGet:
              path: /api/health
              port: http
            initialDelaySeconds: 20
---
{{- end }}
